/** @file nim_sysmsg_helper.h
  * @brief sysmsg 辅助方法和数据结构定义
  * @copyright (c) 2015, NetEase Inc. All rights reserved
  * @author Oleg
  * @date 2015/10/20
  */

#ifndef _NIM_SDK_CPP_SYSMSG_HELPER_H_
#define _NIM_SDK_CPP_SYSMSG_HELPER_H_

#include <string>
#include <list>
#include <functional>
#include "json.h"
#include "nim_common_helper.h"

/**
* @namespace nim
* @brief namespace nim
*/
namespace nim
{

#include "nim_sysmsg_def.h"
#include "nim_msglog_def.h"
#include "nim_res_code_def.h"

/** @struct 系统消息和自定义通知数据 */
struct SysMessage
{
	__int64		timetag_;			/**< 通知时间戳（毫秒） */
	NIMSysMsgType	type_;			/**< 通知类型 */
	std::string	receiver_accid_;	/**< 接收者ID */
	std::string sender_accid_;		/**< 发送者ID */
	std::string content_;			/**< 通知内容 */
	std::string	attach_;			/**< 通知附件 */
	__int64		id_;				/**< 通知ID */
	BoolStatus	support_offline_;	/**< 是否支持离线消息*/
	std::string	apns_text_;			/**< 推送通知内容 */
	NIMSysMsgStatus	status_;		/**< 通知状态 */

	Json::Value push_payload_;		/**< 第三方自定义的推送属性，限制数据类型Json，长度2048 */
	BoolStatus	push_enable_;		/**< 是否需要推送*/
	BoolStatus	push_need_badge_;	/**< 推送是否需要做消息计数*/
	BoolStatus	push_need_nick_;	/**< 推送是否需要昵称*/

	NIMResCode	rescode_;			/**< 通知错误码 */
	NIMMessageFeature	feature_;	/**< 通知属性 */
	int			total_unread_count_;/**< 总计的通知未读数 */
	std::string client_msg_id_;		/**< 通知ID（客户端） */

	/** 构造函数 */
	SysMessage() : timetag_(0)
		, id_(0)
		, support_offline_(BS_NOT_INIT)
		, total_unread_count_(0)
		, type_(kNIMSysMsgTypeUnknown)
		, status_(kNIMSysMsgStatusNone)
		, feature_(kNIMMessageFeatureDefault) 
		, push_enable_(BS_NOT_INIT)
		, push_need_badge_(BS_NOT_INIT)
		, push_need_nick_(BS_NOT_INIT) {}

	/** @fn std::string ToJsonString() const
	  * @brief 组装Json Value字符串
	  * @return string Json Value字符串 
      */
	std::string	ToJsonString() const
	{
		Json::Value values;
		values[kNIMSysMsgKeyToAccount] = receiver_accid_;
		values[kNIMSysMsgKeyFromAccount] = sender_accid_;
		values[kNIMSysMsgKeyType] = type_;
		values[kNIMSysMsgKeyAttach] = attach_;
		values[kNIMSysMsgKeyMsg] = content_;
		values[kNIMSysMsgKeyLocalClientMsgId] = client_msg_id_;
		if (support_offline_ != BS_NOT_INIT)
			values[kNIMSysMsgKeyCustomSaveFlag] = support_offline_ == BS_TRUE ? 1 : 0;
		values[kNIMSysMsgKeyCustomApnsText] = apns_text_;
		values[kNIMSysMsgKeyTime] = timetag_;
		values[kNIMSysMsgKeyMsgId] = id_;
		values[kNIMSysMsgKeyLocalStatus] = status_;
		if (push_enable_ != BS_NOT_INIT)
			values[kNIMSysMsgKeyPushEnable] = push_enable_ == BS_TRUE ? 1 : 0;
		if (push_need_nick_ != BS_NOT_INIT)
			values[kNIMSysMsgKeyPushNeedNick] = push_need_nick_ == BS_TRUE ? 1 : 0;
		if (push_need_badge_ != BS_NOT_INIT)
			values[kNIMSysMsgKeyNeedBadge] = push_need_badge_ == BS_TRUE ? 1 : 0;
		if (!push_payload_.empty())
			values[kNIMSysMsgKeyPushPayload] = push_payload_.toStyledString();
		return values.toStyledString();
	}
};

/** @fn bool ParseSysMessage(const std::string& sysmsg_json, SysMessage& msg)
  * @brief 解析系统消息或自定义通知
  * @param[in] sysmsg_json 系统消息或自定义通知(Json Value数据字符串)
  * @param[out] msg 系统消息或自定义通知
  * @return bool 解析成功或失败 
  */
bool ParseSysMessage(const std::string& sysmsg_json, SysMessage& msg);

/** @fn bool ParseSysMessages(const std::string& sysmsgs_json, std::list<SysMessage>& msgs, int* unread)
  * @brief 解析系统消息或自定义通知
  * @param[in] sysmsgs_json 系统消息或自定义通知(Json Value数据字符串)
  * @param[out] msgs 系统消息或自定义通知
  * @param[out] unread 当前总计的未读数
  * @return bool 解析成功或失败 
  */
bool ParseSysMessages(const std::string& sysmsgs_json, std::list<SysMessage>& msgs, int* unread);

/** @fn void ParseSysMessageContent(const Json::Value& content_json, SysMessage& msg)
  * @brief 解析系统消息或自定义通知的内容
  * @param[in] content_json 系统消息或自定义通知的内容(Json Value数据)
  * @param[out] msg 系统消息或自定义通知
  * @return void
  */
void ParseSysMessageContent(const Json::Value& content_json, SysMessage& msg);
} //namespace nim

#endif //_NIM_SDK_CPP_SYSMSG_HELPER_H_